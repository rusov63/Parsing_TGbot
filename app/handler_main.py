from typing import Optional
import asyncio
import pandas as pd
from aiogram import Router, types, F
from aiogram.enums import ChatAction
from aiogram.filters import Command
import os
from aiogram.types import ReplyKeyboardRemove, CallbackQuery

from app.bd.bd_crawler import save_data_to_db
from app.calc_average_price import show_average_price
from app.correct_data import check_excel_data, check_correct_columns
from app.keyboards.keyboard_crawler import cancel_keyboard
from config import SLEEP_TIME, CHUNK_SIZE, bot

crawler_router = Router()


@crawler_router.message(Command('crawler'))
async def start_crawler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crawler –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∞—É–ª–µ—Ä–æ–º

    :arg: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :return: None
    """
    await message.bot.send_chat_action(chat_id=message.from_user.id,
                                       action=ChatAction.TYPING)
    await asyncio.sleep(SLEEP_TIME)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'title', 'url' –∏ 'xpath'\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Å–∫—Ä–µ–ø–∫–∏ üìé –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
                         reply_markup=cancel_keyboard()
                         )


@crawler_router.callback_query(F.data == '/crawler')
async def start_callbacks(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /crawler

    :arg: callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞

    :return: None
    """
    await callback.bot.send_chat_action(chat_id=callback.message.from_user.id,
                                        action=ChatAction.TYPING)
    await asyncio.sleep(.1)

    await callback.answer()
    await callback.message.answer(f'–í—ã–±—Ä–∞–ª–∏: –°–±–æ—Ä—â–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'title', 'url' –∏ 'xpath'\n"
                                  "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Å–∫—Ä–µ–ø–∫–∏ üìé –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
                                  reply_markup=cancel_keyboard()
                                  )


@crawler_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_operation(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏

    :arg: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :return: None
    """
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())


@crawler_router.message(F.document)
async def get_document(message: types.Message) -> Optional[str]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞

    :arg: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º

    :return: Optional[str]: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ None –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    """
    try:
        await message.bot.send_chat_action(chat_id=message.from_user.id,
                                           action=ChatAction.UPLOAD_DOCUMENT)
        document = message.document

        res = await check_excel_data(document)
        if res is None:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx)")
            return

        await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...")

        file = await bot.get_file(document.file_id)
        file_path = f"downloads/{document.file_name}"

        os.makedirs("downloads", exist_ok=True)

        await bot.download_file(file.file_path, file_path)

        df = pd.read_excel(file_path)

        res = await check_correct_columns(df)
        if res is None:
            await message.reply("–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (title, url, xpath)")
            return

        df_string = df.to_string()
        chunks = [df_string[i:i + CHUNK_SIZE] for i in range(0, len(df_string), CHUNK_SIZE)]

        await message.answer("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
        for chunk in chunks:
            await asyncio.sleep(SLEEP_TIME)
            await message.answer(chunk)

        await message.answer('–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...')
        await asyncio.sleep(SLEEP_TIME)
        size = ["–§–∞–π–ª –±–æ–ª—å—à–æ–π, –µ—â–µ —á—É—Ç—å —á—É—Ç—å..." if len(df_string) >= CHUNK_SIZE else "–ü–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ!"]
        await message.answer(*size)

        await save_data_to_db(df, message)
        await message.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î')
        await message.answer(f'–§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!')

        os.remove(file_path)

        await show_average_price(message)

    except asyncio.TimeoutError:
        await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")

    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
